// Code generated by MockGen. DO NOT EDIT.
// Source: terraform.go
//
// Generated by this command:
//
//	mockgen -source=terraform.go -package=mock -destination=mock/mock.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	terraform "github.com/yu-icchi/mu/pkg/terraform"
	gomock "go.uber.org/mock/gomock"
)

// MockTerraform is a mock of Terraform interface.
type MockTerraform struct {
	ctrl     *gomock.Controller
	recorder *MockTerraformMockRecorder
	isgomock struct{}
}

// MockTerraformMockRecorder is the mock recorder for MockTerraform.
type MockTerraformMockRecorder struct {
	mock *MockTerraform
}

// NewMockTerraform creates a new mock instance.
func NewMockTerraform(ctrl *gomock.Controller) *MockTerraform {
	mock := &MockTerraform{ctrl: ctrl}
	mock.recorder = &MockTerraformMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTerraform) EXPECT() *MockTerraformMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockTerraform) Apply(ctx context.Context, params *terraform.ApplyParams, opts ...terraform.Option) (*terraform.Output, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Apply", varargs...)
	ret0, _ := ret[0].(*terraform.Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockTerraformMockRecorder) Apply(ctx, params any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockTerraform)(nil).Apply), varargs...)
}

// Cleanup mocks base method.
func (m *MockTerraform) Cleanup(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cleanup", ctx)
}

// Cleanup indicates an expected call of Cleanup.
func (mr *MockTerraformMockRecorder) Cleanup(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockTerraform)(nil).Cleanup), ctx)
}

// CompareVersion mocks base method.
func (m *MockTerraform) CompareVersion(ctx context.Context, version string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareVersion", ctx, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompareVersion indicates an expected call of CompareVersion.
func (mr *MockTerraformMockRecorder) CompareVersion(ctx, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareVersion", reflect.TypeOf((*MockTerraform)(nil).CompareVersion), ctx, version)
}

// ForceUnlock mocks base method.
func (m *MockTerraform) ForceUnlock(ctx context.Context, lockID string, opts ...terraform.Option) (*terraform.ForceUnlockOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, lockID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ForceUnlock", varargs...)
	ret0, _ := ret[0].(*terraform.ForceUnlockOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForceUnlock indicates an expected call of ForceUnlock.
func (mr *MockTerraformMockRecorder) ForceUnlock(ctx, lockID any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, lockID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceUnlock", reflect.TypeOf((*MockTerraform)(nil).ForceUnlock), varargs...)
}

// Import mocks base method.
func (m *MockTerraform) Import(ctx context.Context, params *terraform.ImportParams, opts ...terraform.Option) (*terraform.ImportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Import", varargs...)
	ret0, _ := ret[0].(*terraform.ImportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Import indicates an expected call of Import.
func (mr *MockTerraformMockRecorder) Import(ctx, params any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Import", reflect.TypeOf((*MockTerraform)(nil).Import), varargs...)
}

// Init mocks base method.
func (m *MockTerraform) Init(ctx context.Context, params *terraform.InitParams, opts ...terraform.Option) (*terraform.Output, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Init", varargs...)
	ret0, _ := ret[0].(*terraform.Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Init indicates an expected call of Init.
func (mr *MockTerraformMockRecorder) Init(ctx, params any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockTerraform)(nil).Init), varargs...)
}

// Plan mocks base method.
func (m *MockTerraform) Plan(ctx context.Context, params *terraform.PlanParams, opts ...terraform.Option) (*terraform.Output, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Plan", varargs...)
	ret0, _ := ret[0].(*terraform.Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Plan indicates an expected call of Plan.
func (mr *MockTerraformMockRecorder) Plan(ctx, params any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Plan", reflect.TypeOf((*MockTerraform)(nil).Plan), varargs...)
}

// Setup mocks base method.
func (m *MockTerraform) Setup(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockTerraformMockRecorder) Setup(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockTerraform)(nil).Setup), ctx)
}

// StateRm mocks base method.
func (m *MockTerraform) StateRm(ctx context.Context, params *terraform.StateRmParams, opts ...terraform.Option) (*terraform.StateRmOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StateRm", varargs...)
	ret0, _ := ret[0].(*terraform.StateRmOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateRm indicates an expected call of StateRm.
func (mr *MockTerraformMockRecorder) StateRm(ctx, params any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateRm", reflect.TypeOf((*MockTerraform)(nil).StateRm), varargs...)
}

// SwitchWorkspace mocks base method.
func (m *MockTerraform) SwitchWorkspace(ctx context.Context, workspace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwitchWorkspace", ctx, workspace)
	ret0, _ := ret[0].(error)
	return ret0
}

// SwitchWorkspace indicates an expected call of SwitchWorkspace.
func (mr *MockTerraformMockRecorder) SwitchWorkspace(ctx, workspace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchWorkspace", reflect.TypeOf((*MockTerraform)(nil).SwitchWorkspace), ctx, workspace)
}

// Version mocks base method.
func (m *MockTerraform) Version(ctx context.Context) (string, map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(map[string]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Version indicates an expected call of Version.
func (mr *MockTerraformMockRecorder) Version(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockTerraform)(nil).Version), ctx)
}

// Mockinstaller is a mock of installer interface.
type Mockinstaller struct {
	ctrl     *gomock.Controller
	recorder *MockinstallerMockRecorder
	isgomock struct{}
}

// MockinstallerMockRecorder is the mock recorder for Mockinstaller.
type MockinstallerMockRecorder struct {
	mock *Mockinstaller
}

// NewMockinstaller creates a new mock instance.
func NewMockinstaller(ctrl *gomock.Controller) *Mockinstaller {
	mock := &Mockinstaller{ctrl: ctrl}
	mock.recorder = &MockinstallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockinstaller) EXPECT() *MockinstallerMockRecorder {
	return m.recorder
}

// Install mocks base method.
func (m *Mockinstaller) Install(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Install", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Install indicates an expected call of Install.
func (mr *MockinstallerMockRecorder) Install(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*Mockinstaller)(nil).Install), ctx)
}

// Remove mocks base method.
func (m *Mockinstaller) Remove(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockinstallerMockRecorder) Remove(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*Mockinstaller)(nil).Remove), ctx)
}
