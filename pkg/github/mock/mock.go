// Code generated by MockGen. DO NOT EDIT.
// Source: github.go
//
// Generated by this command:
//
//	mockgen -source=github.go -package=mock -destination=mock/mock.go Github
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	io "io"
	reflect "reflect"

	github "github.com/yu-icchi/mu/pkg/github"
	gomock "go.uber.org/mock/gomock"
)

// MockGithub is a mock of Github interface.
type MockGithub struct {
	ctrl     *gomock.Controller
	recorder *MockGithubMockRecorder
	isgomock struct{}
}

// MockGithubMockRecorder is the mock recorder for MockGithub.
type MockGithubMockRecorder struct {
	mock *MockGithub
}

// NewMockGithub creates a new mock instance.
func NewMockGithub(ctrl *gomock.Controller) *MockGithub {
	mock := &MockGithub{ctrl: ctrl}
	mock.recorder = &MockGithubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGithub) EXPECT() *MockGithubMockRecorder {
	return m.recorder
}

// AddPullRequestLabels mocks base method.
func (m *MockGithub) AddPullRequestLabels(ctx context.Context, number int, labels []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPullRequestLabels", ctx, number, labels)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPullRequestLabels indicates an expected call of AddPullRequestLabels.
func (mr *MockGithubMockRecorder) AddPullRequestLabels(ctx, number, labels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPullRequestLabels", reflect.TypeOf((*MockGithub)(nil).AddPullRequestLabels), ctx, number, labels)
}

// CreateCommitStatus mocks base method.
func (m *MockGithub) CreateCommitStatus(ctx context.Context, commitStatus *github.CommitStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommitStatus", ctx, commitStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCommitStatus indicates an expected call of CreateCommitStatus.
func (mr *MockGithubMockRecorder) CreateCommitStatus(ctx, commitStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommitStatus", reflect.TypeOf((*MockGithub)(nil).CreateCommitStatus), ctx, commitStatus)
}

// CreateIssueComment mocks base method.
func (m *MockGithub) CreateIssueComment(ctx context.Context, number int, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIssueComment", ctx, number, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIssueComment indicates an expected call of CreateIssueComment.
func (mr *MockGithubMockRecorder) CreateIssueComment(ctx, number, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssueComment", reflect.TypeOf((*MockGithub)(nil).CreateIssueComment), ctx, number, body)
}

// CreateIssueCommentReaction mocks base method.
func (m *MockGithub) CreateIssueCommentReaction(ctx context.Context, commentID int64, content string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIssueCommentReaction", ctx, commentID, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIssueCommentReaction indicates an expected call of CreateIssueCommentReaction.
func (mr *MockGithubMockRecorder) CreateIssueCommentReaction(ctx, commentID, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssueCommentReaction", reflect.TypeOf((*MockGithub)(nil).CreateIssueCommentReaction), ctx, commentID, content)
}

// CreateLabel mocks base method.
func (m *MockGithub) CreateLabel(ctx context.Context, name, description, color string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLabel", ctx, name, description, color)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLabel indicates an expected call of CreateLabel.
func (mr *MockGithubMockRecorder) CreateLabel(ctx, name, description, color any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLabel", reflect.TypeOf((*MockGithub)(nil).CreateLabel), ctx, name, description, color)
}

// DeleteArtifactsByNames mocks base method.
func (m *MockGithub) DeleteArtifactsByNames(ctx context.Context, names []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArtifactsByNames", ctx, names)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArtifactsByNames indicates an expected call of DeleteArtifactsByNames.
func (mr *MockGithubMockRecorder) DeleteArtifactsByNames(ctx, names any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArtifactsByNames", reflect.TypeOf((*MockGithub)(nil).DeleteArtifactsByNames), ctx, names)
}

// DeleteLabel mocks base method.
func (m *MockGithub) DeleteLabel(ctx context.Context, label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLabel", ctx, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLabel indicates an expected call of DeleteLabel.
func (mr *MockGithubMockRecorder) DeleteLabel(ctx, label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLabel", reflect.TypeOf((*MockGithub)(nil).DeleteLabel), ctx, label)
}

// DownloadArtifact mocks base method.
func (m *MockGithub) DownloadArtifact(ctx context.Context, id int64, file io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadArtifact", ctx, id, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadArtifact indicates an expected call of DownloadArtifact.
func (mr *MockGithubMockRecorder) DownloadArtifact(ctx, id, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadArtifact", reflect.TypeOf((*MockGithub)(nil).DownloadArtifact), ctx, id, file)
}

// Event mocks base method.
func (m *MockGithub) Event() (github.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Event")
	ret0, _ := ret[0].(github.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Event indicates an expected call of Event.
func (mr *MockGithubMockRecorder) Event() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Event", reflect.TypeOf((*MockGithub)(nil).Event))
}

// FindPullRequestByLabel mocks base method.
func (m *MockGithub) FindPullRequestByLabel(ctx context.Context, label string) (*github.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPullRequestByLabel", ctx, label)
	ret0, _ := ret[0].(*github.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPullRequestByLabel indicates an expected call of FindPullRequestByLabel.
func (mr *MockGithubMockRecorder) FindPullRequestByLabel(ctx, label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPullRequestByLabel", reflect.TypeOf((*MockGithub)(nil).FindPullRequestByLabel), ctx, label)
}

// GetLabel mocks base method.
func (m *MockGithub) GetLabel(ctx context.Context, label string) (*github.Label, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabel", ctx, label)
	ret0, _ := ret[0].(*github.Label)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabel indicates an expected call of GetLabel.
func (mr *MockGithubMockRecorder) GetLabel(ctx, label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabel", reflect.TypeOf((*MockGithub)(nil).GetLabel), ctx, label)
}

// GetPullRequest mocks base method.
func (m *MockGithub) GetPullRequest(ctx context.Context, number int) (*github.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequest", ctx, number)
	ret0, _ := ret[0].(*github.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequest indicates an expected call of GetPullRequest.
func (mr *MockGithubMockRecorder) GetPullRequest(ctx, number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequest", reflect.TypeOf((*MockGithub)(nil).GetPullRequest), ctx, number)
}

// HideIssueComment mocks base method.
func (m *MockGithub) HideIssueComment(ctx context.Context, nodeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HideIssueComment", ctx, nodeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// HideIssueComment indicates an expected call of HideIssueComment.
func (mr *MockGithubMockRecorder) HideIssueComment(ctx, nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HideIssueComment", reflect.TypeOf((*MockGithub)(nil).HideIssueComment), ctx, nodeID)
}

// ListFiles mocks base method.
func (m *MockGithub) ListFiles(ctx context.Context, number int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", ctx, number)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFiles indicates an expected call of ListFiles.
func (mr *MockGithubMockRecorder) ListFiles(ctx, number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockGithub)(nil).ListFiles), ctx, number)
}

// ListPullRequestComments mocks base method.
func (m *MockGithub) ListPullRequestComments(ctx context.Context, number int) ([]*github.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPullRequestComments", ctx, number)
	ret0, _ := ret[0].([]*github.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPullRequestComments indicates an expected call of ListPullRequestComments.
func (mr *MockGithubMockRecorder) ListPullRequestComments(ctx, number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPullRequestComments", reflect.TypeOf((*MockGithub)(nil).ListPullRequestComments), ctx, number)
}

// ListPullRequestsByLabel mocks base method.
func (m *MockGithub) ListPullRequestsByLabel(ctx context.Context, label string, limit int) ([]*github.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPullRequestsByLabel", ctx, label, limit)
	ret0, _ := ret[0].([]*github.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPullRequestsByLabel indicates an expected call of ListPullRequestsByLabel.
func (mr *MockGithubMockRecorder) ListPullRequestsByLabel(ctx, label, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPullRequestsByLabel", reflect.TypeOf((*MockGithub)(nil).ListPullRequestsByLabel), ctx, label, limit)
}

// ListReviews mocks base method.
func (m *MockGithub) ListReviews(ctx context.Context, number int) (github.Reviews, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReviews", ctx, number)
	ret0, _ := ret[0].(github.Reviews)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReviews indicates an expected call of ListReviews.
func (mr *MockGithubMockRecorder) ListReviews(ctx, number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReviews", reflect.TypeOf((*MockGithub)(nil).ListReviews), ctx, number)
}

// MultiGetArtifactsByNames mocks base method.
func (m *MockGithub) MultiGetArtifactsByNames(ctx context.Context, names []string) (github.Artifacts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiGetArtifactsByNames", ctx, names)
	ret0, _ := ret[0].(github.Artifacts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiGetArtifactsByNames indicates an expected call of MultiGetArtifactsByNames.
func (mr *MockGithubMockRecorder) MultiGetArtifactsByNames(ctx, names any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiGetArtifactsByNames", reflect.TypeOf((*MockGithub)(nil).MultiGetArtifactsByNames), ctx, names)
}

// MockEvent is a mock of Event interface.
type MockEvent struct {
	ctrl     *gomock.Controller
	recorder *MockEventMockRecorder
	isgomock struct{}
}

// MockEventMockRecorder is the mock recorder for MockEvent.
type MockEventMockRecorder struct {
	mock *MockEvent
}

// NewMockEvent creates a new mock instance.
func NewMockEvent(ctrl *gomock.Controller) *MockEvent {
	mock := &MockEvent{ctrl: ctrl}
	mock.recorder = &MockEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvent) EXPECT() *MockEventMockRecorder {
	return m.recorder
}

// Number mocks base method.
func (m *MockEvent) Number() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Number")
	ret0, _ := ret[0].(int)
	return ret0
}

// Number indicates an expected call of Number.
func (mr *MockEventMockRecorder) Number() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Number", reflect.TypeOf((*MockEvent)(nil).Number))
}
